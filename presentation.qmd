---
title: "How I Have Used Data Science"
author: "Tommy Matheis"
subtitle: "5/13/25"
format:
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
---

## Where Have I Used Data Science?

I was able to utilize skills learned in this class in primarily two places this semester:

$\bullet$ Introduction to Statistics, Math 58 with Professor Chandler\
$\bullet$ The Student Life Newspaper, on the data team

## What parts of Data Science did I use?

So far, the aspects of data science that I have found most useful include:

$\bullet$ Data visualization with ggplot\
$\bullet$ Using Tidyverse verbs to organize and clean data\
$\bullet$ Permutation/randomization tests to simulate a probability\
$\bullet$ Web scraping

## Analyzing Relative Age Effect for Canadian NHL Players

```{r setup, echo=FALSE, warning=FALSE, message=FALSE}
library(xml2)
library(rvest)
library(tidyverse)
require(mosaicData)
library(patchwork)
```

```{r, echo=FALSE}
url <- "http://www.hockeydb.com/ihdb/players/player_ind_l.html"
NHLdata <- html_table(read_html(url))[1]
prov <- c("BC", "PQ", "ONT", "MAN", "SASK", "ALT", "NFLD", "NB", "PEI", "NS")
NHLdata <- as.data.frame(NHLdata)
names(NHLdata)[1:5] <- c('Name', 'Pos', 'Birthday', 'Birthplace', 'Seasons')
canada <- c()
for (i in 1:10) {
  list.match <- grepl(prov[i], NHLdata$Birthplace)
  canada <- c(canada, which(list.match))
}

canada <- sort(canada)
NHLcanada <- as.Date(NHLdata$Birthday[canada], "%m/%d/%Y")
NHLcanada <- na.omit(NHLcanada)
DF <- data.frame(Date=NHLcanada)
Diff <- function(x, start) as.numeric(x - as.Date(cut(start, "year")))
Bdays <- transform(DF, NumDays = Diff(Date, Date)+1, year = as.numeric(format(NHLcanada,'%Y')))  #Interesting data frame 1
Bdays.recent <- Bdays[Bdays$year > 1975,]  # Interesting data.frame 2
Categorical <- transform(Bdays.recent, quarter=ceiling(NumDays/91.25)) # Interesting data.frame 3
sim <- matrix(0, nrow=1000, ncol=4)
for (i in 1:1000) {
   sim[i,] <- table(sample(1:4, nrow(Categorical), rep=T))   #this will compute the table of how many fall into each category in simulation
}
```

```{r, eval=FALSE}
#Utilizing a given data-set "Bdays.recent"

ggplot(Bdays.recent, aes(x = year, y = NumDays)) +
  geom_point(color = "black") +
  geom_hline(yintercept = 182.5, color = "red", linetype = "dashed") +
  labs(
    x = "Year",
    y = "Day of the Year",
    title = "Birthdays of Canadian NHL Players",
    subtitle = "n = 88"
  ) + theme_minimal(base_family = "Palatino")
```

## 

```{r, echo=FALSE}
#Utilizing a given data-set "Bdays.recent"

ggplot(Bdays.recent, aes(x = year, y = NumDays)) +
  geom_point(color = "black") +
  geom_hline(yintercept = 182.5, color = "red", linetype = "dashed") +
  labs(
    x = "Year",
    y = "Day of the Year",
    title = "Birthdays of Canadian NHL Players",
    subtitle = "n = 88"
  ) + theme_minimal(base_family = "Palatino")
```

## Analyzing Average Lag-Time Between Local and Non-Local Runners

```{r, echo=FALSE}
data(TenMileRace)
TenMileRace$DMV <- with(TenMileRace, state=="DC" | state=="MD" | state=="VA")
TenMileRace$lag <- with(TenMileRace, (time-net))
set.seed(47)
TMR.mini <- rbind(TenMileRace[sample(which(TenMileRace$DMV==TRUE),
20),],TenMileRace[sample(which(TenMileRace$DMV==FALSE),10),]) 
```

```{r, echo = FALSE}
local <- TMR.mini[TMR.mini$DMV==TRUE,] 
nonlocal <- TMR.mini[TMR.mini$DMV==FALSE,]

mean_local <- mean(local$lag)
mean_non_local <- mean(nonlocal$lag)
```

```{r, eval=FALSE}
#Utilizing a given data set "TMR.mini"

ggplot(TMR.mini, aes(x=DMV, y=lag, fill=DMV)) +
  geom_boxplot() +
  labs(title="Comparison of Lag Times by Runner Origin"
       x="Local?",
       y="Lag (seconds)") +
  scale_fill_manual(values=c("orange","skyblue"),
                    labels=c("Non-local","Local")) +
  theme_minimal(base_family = "Palatino")
```

## 

```{r, echo=FALSE}
ggplot(TMR.mini, aes(x=DMV, y=lag, fill=DMV)) +
  geom_boxplot() +
  labs(title="Comparison of Lag Times by Runner Origin",
       x="Local?",
       y="Lag (seconds)") +
  scale_fill_manual(values=c("orange","skyblue"),
                    labels=c("Non-local","Local")) +
  theme_minimal(base_family = "Palatino")
```

## Pomona-Pitzer Athletics Spending

```{r, echo=FALSE}
ppeada <- read_csv("/Users/tommy/Desktop/Intro to Stats/Intro to Stats/ppeada.csv")
ppeada23 <- read_csv("/Users/tommy/Desktop/Intro to Stats/Intro to Stats/ppeada23.csv")
```

```{r, eval=FALSE}
ppeada1 <- ppeada |> 
  filter(sport != "Baseball", sport != "Football", sport != "Softball", sport != "Volleyball", sport != "Lacrosse")
ppeada2 <- ppeada23 |> 
  filter(sport != "Baseball", sport != "Football", sport != "Softball", sport != "Volleyball", sport != "Lacrosse")

ggplot(ppeada2, aes(x = sport, y = expenses, fill = sex)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(
    values = c(
      "M"   = "#0057b8",   
      "F" = "#f7941d"    
    ),
    name = "Team"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    x = "", y = "Proportion of Funding",
    title = "Proportions of Funding Between Men's and Women's Teams by Sport",
    subtitle = "2022-2023"
  ) +
  theme_minimal(base_family = "Palatino")
```

## 

```{r, echo=FALSE}
ppeada1 <- ppeada |> 
  filter(sport != "Baseball", sport != "Football", sport != "Softball", sport != "Volleyball", sport != "Lacrosse")
ppeada2 <- ppeada23 |> 
  filter(sport != "Baseball", sport != "Football", sport != "Softball", sport != "Volleyball", sport != "Lacrosse")

ggplot(ppeada2, aes(x = sport, y = expenses, fill = sex)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(
    values = c(
      "M"   = "#0057b8",   
      "F" = "#f7941d"    
    ),
    name = "Team"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    x = "", y = "Proportion of Funding",
    title = "Proportions of Funding Between Men's and Women's Teams by Sport",
    subtitle = "2022-2023"
  ) +
  theme_minimal(base_family = "Palatino")
```

## Pomona-Pitzer Athletics Spending

```{r, eval=FALSE}
ggplot(ppeada1, aes(x = sport, y = expenses, fill = sex)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(
    values = c(
      "M"   = "#0057b8",   
      "F" = "#f7941d"   
    ),
    name = "Team"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    x = "", y = "Proportion of Funding",
    title = "Proportions of Funding Between Men's and Women's Teams by Sport",
    subtitle = "2023-2024"
  ) +
  theme_minimal(base_family = "Palatino")
```

## 

```{r, echo=FALSE}
ggplot(ppeada1, aes(x = sport, y = expenses, fill = sex)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(
    values = c(
      "M"   = "#0057b8",   
      "F" = "#f7941d"   
    ),
    name = "Team"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    x = "", y = "Proportion of Funding",
    title = "Proportions of Funding Between Men's and Women's Teams by Sport",
    subtitle = "2023-2024"
  ) +
  theme_minimal(base_family = "Palatino")
```

## Fall 2025 Pre-Registration

```{r, echo=FALSE}
fulldf <- read_csv("/Users/tommy/Desktop/TSL/Registration/Tommy_Registration/spring-registration-2025-full.csv")

num_closed <- fulldf |>
  group_by(DateTime) |>
  summarize(closed = sum((course_status == "C") & (seats_filled >= seats_total)))

start <- as.POSIXct("2025-04-22 08:00:00",
                    tz = "America/Los_Angeles")
```

```{r, eval=FALSE}
#Using data collected from Hyperschedule every 15 minutes during registration

ggplot(num_closed, aes(x = DateTime, y = closed)) +
  geom_line(color = "blue", linewidth = 1.7) +
  geom_vline(xintercept = as.POSIXct("2025-04-22 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-22 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Start of Senior \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  geom_vline(xintercept = as.POSIXct("2025-04-23 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-23 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Start of Sophomore \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  geom_vline(xintercept = as.POSIXct("2025-04-24 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-24 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Start of Freshmen \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  scale_y_continuous(limits = c(0, 750),
                     breaks  = seq(0, 750, by = 100)) +
  scale_x_datetime(
    breaks = seq(from   = start,
                 to     = max(num_closed$DateTime),   # or a hard date
                 by     = "8 hours"),
    timezone     = "America/Los_Angeles",   # <-- converts tick labels
    date_labels  = "%b %d\n%I:%M %p"           # e.g. "Apr 23\n01:00"
  ) +
  labs(
    x = "",
    y = "Number of Courses",
    title = "Courses Closed During Fall 2025 Pre-Registration"
  ) +
  theme_minimal(base_family = "Palatino") +
  theme(plot.title = element_text(size = 18))
```

## 

```{r, echo=FALSE}
ggplot(num_closed, aes(x = DateTime, y = closed)) +
  geom_line(color = "blue", linewidth = 1.7) +
  geom_vline(xintercept = as.POSIXct("2025-04-22 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-22 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Rising Senior \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  geom_vline(xintercept = as.POSIXct("2025-04-23 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-23 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Rising Junior \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  geom_vline(xintercept = as.POSIXct("2025-04-24 08:00:00", tz = "America/Los_Angeles"), color = "red", linetype = "dashed") +
  annotate("text",
           x = as.POSIXct("2025-04-24 9:00:00",
                          tz = "America/Los_Angeles"),
           y = 700,            
           label = "Rising Sophomore \nRegistration", hjust = 0, size = 3.5, family = "Palatino") +
  scale_y_continuous(limits = c(0, 750),
                     breaks  = seq(0, 750, by = 100)) +
  scale_x_datetime(
    breaks = seq(from   = start,
                 to     = max(num_closed$DateTime),   # or a hard date
                 by     = "8 hours"),
    timezone     = "America/Los_Angeles",   # <-- converts tick labels
    date_labels  = "%b %d\n%I:%M %p"           # e.g. "Apr 23\n01:00"
  ) +
  labs(
    x = "",
    y = "Number of Courses",
    title = "Courses Closed During Fall 2025 Pre-Registration"
  ) +
  theme_minimal(base_family = "Palatino") +
  theme(plot.title = element_text(size = 18))
```

## Current Project: Scraping Swimcloud.com

```{r, eval=FALSE}
swimmers_2025_M <- function(page) {
  url <- paste0("https://www.swimcloud.com/recruiting/rankings/2025/M/1/?page=", page)
  page <- read_html(url)
  
  ranking <- page |>
    html_elements(".u-pr0") |>
    html_text() |>
    as.numeric()

  power_index <- page |>
    html_elements("td.u-text-end") |>
    html_text() |>
    as.numeric()

  state <- page |>
    html_elements(".u-text-small") |>
    html_text() |>
    str_extract("[A-Z]{2}$")

  swimmers <- tibble(
    ranking = ranking,
    power_index = power_index,
    state = state,
    sex = "M"
  )
}

pages <- 1:537
top_swimmers_2025_M <- map_dfr(pages, swimmers_2025_M) |>
  write.csv("top_swimmers_2025_M.csv")
```

## Thank you!

\`\`\`
